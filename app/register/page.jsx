'use client'
import { Suspense, useEffect, useState } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { supabase } from '@/lib/supabase'

// –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º Next.js –Ω–µ –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –±–∏–ª–¥–µ
export const dynamic = 'force-dynamic'

function RegisterInner() {
  const router = useRouter()
  const search = useSearchParams()
  const [loading, setLoading] = useState(false)
  const [form, setForm] = useState({ name: '', phone: '', email: '', password: '' })
  const [refCodeFromUrl, setRefCodeFromUrl] = useState(null)
  const [errors, setErrors] = useState({})

  useEffect(() => {
    const ref = search.get('ref')
    if (ref) setRefCodeFromUrl(ref.trim())
  }, [search])

  const handleChange = (e) => {
    const { name, value } = e.target
    setForm({ ...form, [name]: value })
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors({ ...errors, [name]: '' })
    }
  }

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è - –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
  const isValidPassword = (password) => {
    return password && password.length >= 6
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {}
    
    if (!form.name.trim()) {
      newErrors.name = 'üë§ –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    } else if (form.name.trim().length < 2) {
      newErrors.name = 'üë§ –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
    }
    
    if (!form.phone.trim()) {
      newErrors.phone = 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–≤—è–∑–∏'
    } else if (form.phone.trim().length < 10) {
      newErrors.phone = 'üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    }
    
    if (!form.email.trim()) {
      newErrors.email = 'üìß Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      newErrors.email = 'üìß –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
    }
    
    if (!isValidPassword(form.password)) {
      newErrors.password = 'üîí –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!validateForm()) {
      return
    }
    
    setLoading(true)
    const { error } = await supabase.auth.signUp({
      email: form.email,
      password: form.password,
      options: {
        data: {
          name: form.name,
          phone: form.phone,
          ref_code: refCodeFromUrl,
        },
        emailRedirectTo: `${window.location.origin}/auth/callback`,
      },
    })
    setLoading(false)

    if (error) {
      console.error('Registration error:', error)
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      
      if (error.message.includes('User already registered')) {
        errorMessage = 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      } else if (error.message.includes('Password should be at least')) {
        errorMessage = 'üîí –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
      } else if (error.message.includes('Invalid email')) {
        errorMessage = 'üìß –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
      } else if (error.message.includes('Signup is disabled')) {
        errorMessage = 'üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞'
      } else if (error.message.includes('Email rate limit exceeded')) {
        errorMessage = '‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      } else {
        errorMessage = `‚ùå ${error.message}`
      }
      
      alert(errorMessage)
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    const { data: { user } } = await supabase.auth.getUser()
    if (user && !user.email_confirmed_at) {
      alert('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–∏—Å—å–º–æ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤ –ø–∞–ø–∫—É "–°–ø–∞–º"')
      router.push('/login')
    } else {
      alert('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
      // –ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º - Header —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    }
  }

  return (
    <main className="min-h-screen pt-16 container-page py-4 sm:py-8 px-4">
      <div className="max-w-md mx-auto">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-3 sm:p-4 mb-4 sm:mb-6">
          <div className="flex items-start gap-2 sm:gap-3">
            <svg className="w-4 h-4 sm:w-5 sm:h-5 text-green-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <h3 className="text-xs sm:text-sm font-medium text-green-800 mb-1">–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</h3>
              <p className="text-xs text-green-700">
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∏–¥–∫–∞–º –∏ –±–æ–Ω—É—Å–∞–º!
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4 sm:p-6 lg:p-8">
          <h1 className="text-xl sm:text-2xl font-semibold text-center mb-4 sm:mb-6">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>

          <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-5">
            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                –í–∞—à–µ –∏–º—è
              </label>
              <input 
                className={`input text-sm sm:text-base ${errors.name ? 'border-red-500' : ''}`}
                placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" 
                name="name" 
                value={form.name} 
                onChange={handleChange} 
                required 
              />
              <div className="text-xs text-gray-500 mt-1">
                –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è
              </div>
              {errors.name && (
                <div className="text-xs text-red-500 mt-1 flex items-center gap-1">
                  <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.name}
                </div>
              )}
            </div>

            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input 
                className={`input text-sm sm:text-base ${errors.phone ? 'border-red-500' : ''}`}
                placeholder="+7 (999) 123-45-67" 
                name="phone" 
                value={form.phone} 
                onChange={handleChange} 
                required 
              />
              <div className="text-xs text-gray-500 mt-1">
                –î–ª—è —Å–≤—è–∑–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
              </div>
              {errors.phone && (
                <div className="text-xs text-red-500 mt-1 flex items-center gap-1">
                  <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.phone}
                </div>
              )}
            </div>

            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                Email –∞–¥—Ä–µ—Å
              </label>
              <input 
                className={`input text-sm sm:text-base ${errors.email ? 'border-red-500' : ''}`}
                placeholder="your@email.com" 
                type="email" 
                name="email" 
                value={form.email} 
                onChange={handleChange} 
                required 
              />
              <div className="text-xs text-gray-500 mt-1">
                –ù–∞ —ç—Ç–æ—Ç email –ø—Ä–∏–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
              </div>
              {errors.email && (
                <div className="text-xs text-red-500 mt-1 flex items-center gap-1">
                  <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.email}
                </div>
              )}
            </div>

            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input 
                className={`input text-sm sm:text-base ${errors.password ? 'border-red-500' : ''}`}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                type="password" 
                name="password" 
                value={form.password} 
                onChange={handleChange} 
                required 
              />
              <div className="text-xs text-gray-500 mt-1">
                –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
              </div>
              {errors.password && (
                <div className="text-xs text-red-500 mt-1 flex items-center gap-1">
                  <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.password}
                </div>
              )}
            </div>

            {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ */}
            {refCodeFromUrl && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <div className="flex items-center gap-2">
                  <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="text-sm text-blue-800">
                    –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <span className="font-mono font-semibold">{refCodeFromUrl}</span>
                  </span>
                </div>
              </div>
            )}

                  <button className="btn btn-primary w-full py-2.5 sm:py-3 text-sm sm:text-base" disabled={loading}>
                    {loading ? (
                      <div className="flex items-center justify-center gap-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span className="hidden sm:inline">–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...</span>
                        <span className="sm:hidden">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>
                      </div>
                    ) : (
                      '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'
                    )}
                  </button>

                  <div className="text-center">
                    <p className="text-xs sm:text-sm text-gray-600">
                      –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
                      <Link href="/login" className="text-blue-600 hover:underline font-medium">
                        –í–æ–π—Ç–∏
                      </Link>
                    </p>
                  </div>
          </form>
        </div>
      </div>
    </main>
  )
}

export default function RegisterPage() {
  return (
    <Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}>
      <RegisterInner />
    </Suspense>
  )
}